Implementation Details
**********************

This chapter include implementation details from database structure to UML class diagrams.
It should help develop an understanding of the project for newcomers.

The Database
============

The Database is implemented using SQLite3 in Python. Using SQLite database files as project files is quite convenient.
Therefore we will be referring to database files with project files.

Database Structure (alpha release)
----------------------------------

The following diagram shows an entity-relationship diagram (ER-Diagram) of the alpha release.

.. figure:: resources/diagrams/er_diagram_alpha.png

    ER-Diagram of the alpha release.

Some entities have composite attributes. For example, Links has attribute :math:`\vec{v}`, which practically
have to be divided up into v_x, v_y, and v_z.
*dof* represents which degree of freedom is locked/unlocked (0/1) on a node to save boundary conditions.
*edof* is element degree of freedom which consists of 12 integer numbers.

SQLite Queries
--------------
The following sql query shows how to pass parameters to an sql query.
cur is connection object cursor.

.. code-block:: python

    import sqlite3
    conn = sqlite3.connect("path_to_database")
    cur = conn.cursor()
    cur.execute('SELECT id FROM Nodes WHERE x={x} and y={y} and z={z};'.format(x=0, y=0.1, z=-1))

Another way of passing parameters to sql queries is using the tuple params.

.. code-block:: python

    conn = sqlite3.connect("path_to_database")
    cur = conn.cursor()
    params = (0, 0.1, -1)
    cur.execute('SELECT id FROM Nodes WHERE x={?} and y={?} and z={?};', params)

You can also obtain panda Dataframes using sql queries. It is very convenient especially when using QTableViews to show
data tables.

.. code-block:: python

    conn = sqlite3.connect("path_to_database")
    import pandas.io.sql as sql
    sql.read_sql("""SELECT E, G, A, Iy, Iz, kv, k from Profile""", conn)

Reading Geometry Files Efficiently
-----------------------------------

Geometry files are, for modifiability purposes, text files with ASCII characters.
Reading large text files into SQLite database could cause run-time problems.
*import_text* method in *Database* class avoids those problems by firstly reading the text file in a buffered CSV file,
which will be transformed into pandas dataframe, which is imported eventually into the database efficiently.

The following activity diagram summarizes the steps taken in *import_text* to import geometry files.

.. figure:: resources/diagrams/activity_import_text.png

    UML activity diagram showing steps to import geometry files in acitvity import_text.

Resetting Primary Keys
-----------------------

After deleting rows in SQLite3 tables, primary keys would have gaps. To prevent that from happening, primary keys have to be altered.
Resetting primary keys involves changing foreign keys as well.

The following methods reset primary keys for each table:

* *sort_node_indexes*
* *sort_profile_indexes*
* *sort_link_indexes*
* *sort_load_indexes*
* *sort_lineload_indexes*

PySide2 or PyQt5
================

PySid2 and PyQt5 have almost the same api.
But it is worth mentioning that using PyQt5 is more beneficial in the long run.
PySide development lagged behind PyQt and PySide2 supports only Linux and MacOs Platforms.
On the Other hand PySide have very convenient Libraries for 3D animations that PyQt5 dont have.

Eventually PyQt5 was chosen due to major popularity and community support.

Package vs. Executable
======================

Running Beamon as a package is not much challenging as an Executable that has been securely compressed using
e.g. PyInstaller (among other).

In some cases you need to differentiate between the two situations.
Some dependencies have to be formatted first before they get used. For example all .ui files will be formatted
using pyuic5 from xml to python at every run in the main script. This will prevent mistakes like forgetting
to update the user interface that is being used after modification.
In the Executable version of the program this is no longer needed. The program will be in a frozen state and there
are no updates to any files anymore.

For this reason there are two main scripts for each of the program versions
**__main__.py** for Beamon as a package and **__main.py** for Beamon as an executable.

**__main.py** has no formatting commands whereas **__main__.py** uses pyuic5 module to format local files like .ui and
.rst


Class Structure
===============

The following class diagram shows the whole class structure in Beamon project.

.. figure:: resources/diagrams/class_complex.*

    UML class diagram showing Beamon project structure.

There are two main scripts *__main__* and *__main* that instantiate the application.
*__main is for executables and does not contain formatting instructions. Both main scripts are connected to the
*Main* GUI class.

*Main* resides in the *ui* package, which contains everything related to the user interface.
As you can see *Main* inherits from *QMainWindow*, which is a single tone PyQt5 class.

*VisualizerMainForm* class is responsible for visualization. It contains *PyVistaWidget* which is the visualization
component based on PyVista and should therefore inherit from *QtInteractor*.
Furthermore, the visualizer can call helper dialogs like *GridSettingsMainForm* to control grid settings.

*BeamSizeMainForm* class can be called from *Main*. BeamSize is an expansion of the basic functionality of Beamon and
should therefore reside in the *expansions* package. *BeamSizeMainform* contains a PyQtGraph plot widget. *PlotWidget*
should therefore inherit from *QGraphicsView*.

*QDockWidget* can be triggered from *Main* and contains a widget that could be dynamically changed. *QDockWidget*
shows either *IntroMainForm* or *TableMainForm*.

*IntroMainForm* contains a web browser that shows this documentation in PDF-format.

Inside *tables* package you will find classes that follow the model-view-controller design pattern. *TableMainForm*
contains the view, which is QTableView. *InLineEditDelegate* is the controller. All models like *NodeTableModel* inherit
from *QAbstractTableModel*.


The Simulation
==============

The following diagram shows how the simulation in Beamon is implemented. Three parts are involved in the Simulation,
*Database*, *Core* and *CALFEM*. Each part has it's own responsibility. *Database* is responsible for obtaining and
saving data. *Core* is responsible for the calculations implemented in Beamon. *CALFEM* is the Calfem-Python Package
which is responsible for the most complex calculation.

.. figure:: resources/diagrams/activity_simulation.jpg

    UML activity diagram showing static simulation steps.




